/********************************************************************** 
 * Note: This license has also been called the "New BSD License" or 
 * "Modified BSD License". See also the 2-clause BSD License.
 *
 * Copyright Â© 2018-2019 - General Electric Company, All Rights Reserved
 * 
 * Project: ANSWER, developed with the support of the Defense Advanced 
 * Research Projects Agency (DARPA) under Agreement  No.  HR00111990006. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its 
 *    contributors may be used to endorse or promote products derived 
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 ***********************************************************************/
 uri "http://sadl.org/ML.sadl" alias ml.
 
 import "http://sadl.org/data.sadl".
 import "http://sadl.org/models.sadl".
 import "http://sadl.org/ScientificConcepts3.sadl".
 
 External unitResolver(string u, ...) returns string: "http://sadl.org/unitSelector". 
 External derivative(ScientificConcept numerator, ScientificConcept denominator, int n) returns decimal, string: 
 	"http://sadl.org/derivative".

 ^Equation is a class.	// this is defined in sadl base model and should be available.
 
 MLModel is a type of ^Model,
 	described by concept with values of type ScientificConcept,
 	described by representation with a single value of type ^Equation,
 	described by trainingData with values of type TabularDataSet.
 	
 KChainModel is a type of ^Model.
 {PhysicsModel, MLModel} are types of KChainModel.
 // Composition of models
 // Variations of a model NSL, NSL-constant-mass
  	
 	
 MFVData1 is a TabularDataSet,
 	has column (a Column ml:Time with name "timestamp", with ^type "xsd:dateTime"),
 	has column (a Column ml:Force with name "Force", with ^type Force),
 	has column (a Column ml:Mass with name "Mass", with ^type Mass),
 	has column (a Column ml:Velocity with name "Velocity", with ^type Velocity),
 	has location "http://nsk1websadl01.crd.ge.com/aske/data/mfvdata1.csv".
 	
// This is created as an exploratory concept 	
 MassForceVelocityModel is an MLModel,
 	has concept Force,
 	has concept Mass,
 	has concept Velocity.
 	
// This query follows (	
 Ask: select ds where ds is a TabularDataSet and ds has column c1 and c1 has ^type Force and
 	ds has column c2 and c2 has ^type Mass and ds has column c3 and c3 has ^type Velocity.	
 
 Ask: select distinct ds where ds is a TabularDataSet and 
 	ds has column c1 and c1 has ^type (concept of MassForceVelocityModel) and
 	ds has column c2 and c2 has ^type (concept of MassForceVelocityModel) and
 	ds has column c3 and c3 has ^type (concept of MassForceVelocityModel).	
 	
// these are added to model 	
 Equation newtons2ndLaw 
 	(note "Force is equal to the derivative of momentum with respect to time.") 
 	(Mass m, Velocity v) returns Force: 
 	a Force f with ^value fv, with unit fu
 	
 	return f 
 	
 	where mv is a Momentum with ^value (^value of m * ^value of v), with unit unitResolver("*", unit of m, unit of v) and
 		[fv,fu] = derivative(mv, Time, 1).
 
 MassForceVelocityModel has representation newtons2ndLaw,
 	 	has trainingData MFVData1. 	
  	
 