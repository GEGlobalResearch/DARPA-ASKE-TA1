 uri "http://sadl.org/CodeModel.sadl" alias codemdl.
 
 CodeElement is a class described by beginsAt with a single value of type int,
 	described by endsAt with a single value of type int.
 	
 CodeBlock is a type of CodeElement,
 	described by serialization with a single value of type string,
 	described by comment with values of type Comment,
 	described by containedIn with values of type CodeBlock.
 
 {Class, Method, ConditionalBlock, LoopBlock} are types of CodeBlock.
 
 codemdl:arguments describes Method with a single value of type CodeVariable List.
 codemdl:returnTypes describes Method with a single value of type string List.
 semanticReturnTypes describes Method with a single value of type string List.

// The reference to a CodeVariable can be its definition (Defined),
//	an assignment or reassignment (Reassigned), or just a reference
//	in the right-hand side of an assignment or a conditional (Used)
Usage is a class, must be one of {Defined, Used, Reassigned}.

Reference  is a type of CodeElement
	described by firstRef with a single value of type boolean
	described by codeBlock with a single value of type CodeBlock
	described by usage with values of type Usage
 	described by input (note "CodeVariable is an input to codeBlock CodeBlock") 
 		with a single value of type boolean
 	described by output (note "CodeVariable is an output of codeBlock CodeBlock") 
 		with a single value of type boolean
 	described by setterArgument (note "is this variable input to a setter?") with a single value of type boolean
 	described by comment with values of type Comment.
	
Comment (note "CodeBlock and Reference can have a Comment") is a type of CodeElement
 	described by commentContent with a single value of type string.	

// what about Constant also? Note something maybe an input and then gets reassigned
// Constant could be defined in terms of being set by equations that only involve Constants
// Constants could also relate variables used in different equations as being same
 CodeVariable  is a type of CodeElement, 
 	described by varName with a single value of type string,
 	described by varType with a single value of type string,
 	described by semanticVarType with a single value of type string,
 	described by quantityKind (note "this should be qudt:QuantityKind") with a single value of type ScientificConcept,
 	described by reference with values of type Reference.   
 	
 {ClassField, MethodArgument, MethodVariable} are types of CodeVariable. 	

//External findFirstLocation (CodeVariable cv) returns int: "http://ToBeImplemented".

Rule Transitive  
if inst is a cls and 
   cls is a type of CodeVariable
then inst is a CodeVariable. 

Rule SetNotFirstRef1
if c is a CodeVariable and
   ref is reference of c and
   oneOf(usage of ref, Used, Reassigned) and  
   ref2 is reference of c and
   ref != ref2 and
   cb is codeBlock of ref and   
   cb2 is codeBlock of ref2 and
   cb = cb2 and
   l1 is beginsAt of ref and
   l2 is beginsAt of ref2 and
   l2 > l1   // so ref2 is at an earlier location that ref
then firstRef of ref2 is false.   
   
// first reference is of type "Used" or all earlier refs are of type "Used"	
// this does not cover when no ref2 with l2 < l1 exists
Rule SetAsInput1
if c is CodeVariable and
   ref is reference of c and
   input of ref is not known and 
   usage of ref is Used and
   ref2 is reference of c and
   ref != ref2 and
   cb is codeBlock of ref and   
   cb2 is codeBlock of ref2 and
   cb = cb2 and   
   l1 is beginsAt of ref and
   l2 is beginsAt of ref2 and
   l2 < l1 and  // so ref2 is at an earlier location that ref
   noValue(ref2, usage, Reassigned) // no earlier reassignment of c exists
then input of ref is true. 

// if there is no l2 as specified in the previous rules, then the following covers that case
// do I need to consider codeBlock?????
Rule SetAsInput2
if c is a CodeVariable and
   ref is reference of c and
   input of ref is not known and
   usage of ref is Used and 
   noValue(ref, firstRef)
then input of ref is true. 

// "it is an output if it is computed and is argument to a setter"
// or I could try to use the notion of a constant
Rule SetAsOutput
if c is a CodeVariable and
   setterArgument of c is true and
   ref is a reference of c and
   output of ref is not known and
   usage of ref is Defined //check this?
then
	output of ref is true.      	 





