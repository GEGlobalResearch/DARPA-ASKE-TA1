 uri "http://sadl.org/CodeModel.sadl" alias codemdl.
 
 CodeBlock is a class,
 	described by beginsAt with a single value of type int,
 	described by endsAt with a single value of type int,
 	described by serialization with a single value of type string,
 	described by containedIn with values of type CodeBlock.
 
 {Class, Method, ConditionalBlock, LoopBlock} are types of CodeBlock.

// maybe just Set, Used? Change Defined to Assigned
Usage is a class, must be one of {Defined, Used, Reassigned}.

// associated comments can be in-line or before the reference to it
// first only handling in-line comments
// have not yet folded in the usage of code block
Reference is a class
	described by location with a single value of type int
	described by codeBlock with a single value of type CodeBlock
	described by usage with values of type Usage
	described by inlineCommentStart with a single value of type int
	described by inlineCommentEnd with a single value of type int.

// what about Constant also? Note something maybe an input and then gets reassigned
// Constant could be defined in terms of being set by equations that only involve Constants
// Constants could also relate variables used in different equations as being same
 CodeVariable is a class, 
 	described by varName with a single value of type string,
 	described by varType with a single value of type anyURI,
 	described by setterArgument with a single value of type boolean
 	described by reference with values of type Reference
 	described by input with a single value of type boolean
 	described by output with a single value of type boolean.   

External findFirstLocation (CodeVariable cv) returns int: "http://ToBeImplemented".

// first reference is of type "Used" or all earlier refs are of type "Used"	
// this does not cover when no ref2 with l2 < l1 exists
Rule SetAsInput1
if c is a CodeVariable and
   ref is reference of c and
   usage of ref is Used and
   ref2 is reference of c and
   l1 is location of ref and
   l2 is location of ref2 and
   l2 < l1 and  // so ref2 is at an earlier location that ref
   noValue(ref2, usage, Defined) // no earlier definition of c exists
then input of c is true. 

// if there is no l2 as specified in the previous rules, then the following covers that case
Rule SetAsInput2
if c is a CodeVariable and
   ref is reference of c and
   usage of ref is Used and
   l is location of ref and
   fl is findFirstLocation(c) and
   l = fl
then input of c is true. 

// "it is an output if it is computed and is argument to a setter"
// or I could try to use the notion of a constant
Rule SetAsOutput
if c is a CodeVariable and
   setterArgument of c is true and
   ref is a reference of c and
   usage of ref is Defined //could also be reassigned; basically if it is computed
then
	output of c is true.      	 

// "Those variables set could be outputs; 
// those variables set but not used in other computations are more likely outputs"	

// last thing set is likely to be an output


