uri "http://sadl.org/sadlimplicitmodel" alias sadlimplicitmodel.
/****** The content of this model is automatically included in every SADL model ******/

impliedProperty is a type of annotation.
expandedProperty is a type of annotation.
ScientificConcept is a class.
UnittedQuantity is a type of ScientificConcept,
	described by ^value with values of type decimal,
	described by stddev with values of type decimal,
	described by unit with values of type string.

DataDescriptor is a class, described by localDescriptorName (note "If this DataDescriptor is associated with a named parameter, this is the name") with a single value of type string,
	described by dataType (note "the simple data type, e.g., float") with a single value of type anyURI,
	described by specifiedUnits (note "the array of possible units") with a single value of type string List,
	described by augmentedType (note "ties the DataDescriptor to the semantic domain model") with values of type AugmentedType,
	described by descriptorVariable (note "This identifies the GPVariable, if any, in the AugmentedType which is associated with this DataDescriptor").
dataType of DataDescriptor has at most 1 value.
descriptorVariable of DataDescriptor has at most 1 value.

Language is a class, must be one of {Java, Python, Python-TF, Text, OtherLanguage}.
Script is a class, described by language with a single value of type Language,
	described by script with a single value of type string.
^Equation is a class,
	described by expression with values of type Script.
arguments describes ^Equation with a single value of type DataDescriptor List.
returnTypes describes ^Equation with a single value of type DataDescriptor List.

ExternalEquation is a type of ^Equation,
	described by externalURI with a single value of type anyURI,
	described by externalURL with values of type anyURI.
	
AugmentedType is a class.
augTypeUnits describes AugmentedType with a single value of type string List.
SemanticType (note "allows direct specification of the semantic type of an argument") is a type of AugmentedType, 
	described by semType with a single value of type class.
GraphPattern is a class.
{TriplePattern, FunctionPattern} are types of GraphPattern.
gpSubject describes TriplePattern.
gpPredicate describes TriplePattern.
gpObject describes TriplePattern.
builtin describes FunctionPattern with a single value of type ^Equation.
GPAtom is a class.
{GPVariable, GPLiteralValue, GPResource} are types of GPAtom.
gpVariableName describes GPVariable with a single value of type string.
gpLiteralValue describes GPLiteralValue with values of type data.
argValues (note "values of arguments to the built-in") describes FunctionPattern with a single value of type GPAtom List.

SemanticConstraint (note "used to identify necessary patterns in semantic domain terms") is a type of AugmentedType, 
	described by constraints with a single value of type GraphPattern List.
ThisArgument (note "allows reference to self within an Argument's constraints") is a DataDescriptor.

anyDataType (note "union of all relevant data types") is a type of {decimal or boolean or string or date or dateTime or anyURI}.
DataTableRow is a class,
	described by rowValues with a single value of type anyDataType List.
DataTable is a class,
	described by columnDescriptors with a single value of type DataDescriptor List,
	described by dataContent with a single value of type DataTableRow List,
	described by dataLocation with a single value of type anyURI.

^Rule is a class.
NamedQuery is a class.


/****** The following content comes from the Dialog implicit model fragment provider ******/
		// these properties used by TA2
		UnittedQuantity has impliedProperty ^value.


/****** The following content comes from the Requirements implicit model fragment provider ******/
Event is a class.

TestState is a class.
state describes TestState.
isDefault is a type of annotation. 
prerequisiteState is a type of annotation. 

input is a type of annotation.
description is a type of annotation.


reference_class is a type of annotation.
reference_property is a type of annotation.
reference_range is a type of annotation.
reference_instance is a type of annotation.
reference_test_name is a type of annotation.

TEST_INTERFACE is a class, must be one of {Test_Input, Test_Output, Test_Input_Output, No_Test_Interface}.
PHYSICAL_MAPPING is a class.
physical_value describes PHYSICAL_MAPPING with values of type decimal.
physical_value of PHYSICAL_MAPPING has exactly 1 values.


INTERFACE_DEFINITION is a class.
	functional_max describes INTERFACE_DEFINITION with values of type decimal.
	functional_max of INTERFACE_DEFINITION has exactly 1 values.
	functional_min describes INTERFACE_DEFINITION with values of type decimal.
	functional_min of INTERFACE_DEFINITION has exactly 1 values.
	physical_max describes INTERFACE_DEFINITION with values of type decimal.
	physical_max of INTERFACE_DEFINITION has exactly 1 values.
	physical_min describes INTERFACE_DEFINITION with values of type decimal.
	physical_min of INTERFACE_DEFINITION has exactly 1 values.
	tolerance describes INTERFACE_DEFINITION with values of type decimal.
	tolerance of INTERFACE_DEFINITION has exactly 1 values.
	resolution describes INTERFACE_DEFINITION with values of type decimal.
	resolution of INTERFACE_DEFINITION has exactly 1 values.
	active_threshold describes INTERFACE_DEFINITION with values of type decimal.
	active_threshold of INTERFACE_DEFINITION has exactly 1 values.
	inactive_threshold describes INTERFACE_DEFINITION with values of type decimal.
	inactive_threshold of INTERFACE_DEFINITION has exactly 1 values.
	true_for_time describes INTERFACE_DEFINITION with values of type decimal.
	true_for_time of INTERFACE_DEFINITION has exactly 1 values.
	false_for_time describes INTERFACE_DEFINITION with values of type decimal.
	false_for_time of INTERFACE_DEFINITION has exactly 1 values.

	test_interface describes INTERFACE_DEFINITION with values of type TEST_INTERFACE.
	test_interface of INTERFACE_DEFINITION has exactly 1 values.

	physical_mapping describes INTERFACE_DEFINITION with values of type PHYSICAL_MAPPING.
	physical_mapping of PHYSICAL_MAPPING has exactly 1 values.
	
Specification is a class.
{Requirement, Assertion, Assumption, Verify} are types of Specification.
augments describes Verify with values of type Specification.	

TRANSITION_RESTRICTION is a class,
	described by transition_type with values of type TRANSITION_TYPE.
TRANSITION_TYPE is a class, must be one of {one_time,invalid}.
first_state is a type of annotation.
next_state is a type of annotation.
