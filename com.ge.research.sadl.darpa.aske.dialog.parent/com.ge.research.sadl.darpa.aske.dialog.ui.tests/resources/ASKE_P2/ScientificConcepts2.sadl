///********************************************************************** 
// * Note: This license has also been called the "New BSD License" or 
// * "Modified BSD License". See also the 2-clause BSD License.
// *
// * Copyright ï¿½ 2018-2019 - General Electric Company, All Rights Reserved
// * 
// * Project: ANSWER, developed with the support of the Defense Advanced 
// * Research Projects Agency (DARPA) under Agreement  No.  HR00111990006. 
// *
// * Redistribution and use in source and binary forms, with or without 
// * modification, are permitted provided that the following conditions are met:
// * 1. Redistributions of source code must retain the above copyright notice, 
// *    this list of conditions and the following disclaimer.
// *
// * 2. Redistributions in binary form must reproduce the above copyright notice, 
// *    this list of conditions and the following disclaimer in the documentation 
// *    and/or other materials provided with the distribution.
// *
// * 3. Neither the name of the copyright holder nor the names of its 
// *    contributors may be used to endorse or promote products derived 
// *    from this software without specific prior written permission.
// *
// * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
// * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
// * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
// * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
// * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
// * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
// * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// * THE POSSIBILITY OF SUCH DAMAGE.
// *
// ***********************************************************************/
uri "http://sadl.org/ScientificConcepts2.sadl" alias scicncpts2.

//primitiveData is a type of {decimal or boolean or string}.
//
//Constant is a type of UnittedQuantity.
//UnitSystem is a class, must be one of {Metric, Imperial}.
//  
//Derivative is a type of ScientificConcept, 
//	described by derivedFrom with a single value of type ScientificConcept,
//	described by withRespectTo with a single value of type class.
//	
//Time is a type of UnittedQuantity.
//Temperature is a type of UnittedQuantity.
//Length is a type of UnittedQuantity.
//Position is a type of UnittedQuantity,
//	described by x-coordinate with values of type Length,
//	described by y-coordinate with values of type Length,
//	described by z-coordinate with values of type Length,
//	described by ^time with values of type Time.
//Mass is a type of UnittedQuantity.
//
//Volume is a type of UnittedQuantity.
//Density is a type of UnittedQuantity.
//
//PhysicalThing is a class,
//	described by mass with values of type Mass
//	described by volume with values of type Volume
//	described by density with values of type Density
//	described by temperature with values of type Temperature
//   .
//
//External densityEq(decimal m (mass of a PhysicalThing), 
//	               decimal v (volume of the PhysicalThing))
//	               returns decimal (density of the PhysicalThing): 
//	               "http://com.ge.research.darpa.aske.kchain.densityEq".	
//
//PhysicalObject is a type of PhysicalThing, 
//	described by position with values of type Position.
//		
//Substance is a type of PhysicalThing.
//			
//Gas is a type of Substance.
//Air is a type of Gas.
//
//Velocity is a type of {UnittedQuantity and Derivative}.
//derivedFrom of Velocity only has values of type Position.
//withRespectTo of Velocity only has values of type Time.
//velocity describes PhysicalObject with values of type Velocity.
//
//Acceleration is a type of {UnittedQuantity and Derivative}.
//derivedFrom of Acceleration only has values of type Velocity.
//withRespectTo of Acceleration  only has values of type Time.
//acceleration describes PhysicalObject with values of type Acceleration.
// 
//Momentum is a type of {UnittedQuantity and Derivative}. 
//momentum describes PhysicalThing with values of type Momentum.
//Rule momentumOfPhysicalThing:
// 	if o is a PhysicalObject with velocity v and 
// 		p is a Momentum with ^value (^value of mass of o * ^value of velocity of o), 
// 			with unit unitResolver("*", unit of mass of o, unit of velocity of o)
// 	then momentum of o is p.
//
//Force is a type of {UnittedQuantity and Derivative}.
//derivedFrom of Force only has values of type Momentum.
//withRespectTo of Force only has values of type Time.
//force describes PhysicalObject with values of type Force.
//
//External unitResolver(string operation, string u, ...) 
//	returns string: "http://sadl.org/unitSelector".
//
//External cg(ExternalEquation eq, primitiveData arg, ...) returns primitiveData: "http://com.ge.research.darpa.aske.cg".
//External cgSC(ExternalEquation eq, primitiveData arg, ...) returns ScientificConcept: "http://com.ge.research.darpa.aske.cgsc".
// 
//	