/********************************************************************** 
 * Note: This license has also been called the "New BSD License" or 
 * "Modified BSD License". See also the 2-clause BSD License.
 *
 * Copyright © 2018-2019 - General Electric Company, All Rights Reserved
 * 
 * Project: ANSWER, developed with the support of the Defense Advanced 
 * Research Projects Agency (DARPA) under Agreement  No.  HR00111990006. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its 
 *    contributors may be used to endorse or promote products derived 
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 ***********************************************************************/
 uri "http://sadl.org/TestCEonMach.sadl" alias TestCEonMach.
 
 import "http://sadl.org/CodeExtractionModel.sadl".
// import "http://com.ge.research.sadl.darpa.aske.answer/Mach_java".
 
// Ask: "select ?m ?arg where {?m <rdf:type> <Method> . ?m <cmArguments> ?args . ?args <http://www.jena.hpl.hp.com/ARQ/list#member> ?arg} order by ?m".
// Ask: "select distinct ?m ?arg where {?m <rdf:type> <Method> . ?m <cmArguments> ?args . ?args <rdf:rest>*/<rdf:first> ?arg}".
 
// Ask: select m, cmtcnt where m has comment cmt and cmt has commentContent cmtcnt. 
 
// Ask: "select ?m where {?m <cmHasImplicitInputsOutputs> true}".
 
// Explain: Rule MethodWithImplicitInputs.
//Print: "All CodeVariables:".
//Ask: select cv where cv is a CodeVariable.
//
//Print: "First reference by CodeBlock:".
//Ask: "select ?cb ?cv ?loc ?u where {?cv <rdf:type> <CodeVariable> . ?cv <reference> ?ref . 
//	?ref <codeBlock> ?cb . ?ref <firstRef> true . ?ref <beginsAt> ?loc .
//	?ref <usage> ?u} order by ?cb ?loc ?cv".

//Print: "Implicit inputs:".	
//Ask: select cb, cv, loc where cb is a CodeBlock and
//	ref has codeBlock cb and ref has isImplicit true and
//	ref has input true and cv has reference ref and
//	ref has beginsAt loc order by cb, loc.
////Explain: Rule ImplicitInput.	
//
//Print: "Implicit outputs:".	
//Ask: select cb, cv, loc where cb is a CodeBlock and
//	ref has codeBlock cb and ref has isImplicit true and
//	ref has output true and cv has reference ref and
//	ref has beginsAt loc order by cb, loc.
////Explain: Rule ImplicitOutput.	
//
//Print: "Implicit outputs used as setter argument:".	
//Ask: select cb, cv, loc where cb is a CodeBlock and
//	ref has codeBlock cb and ref has isImplicit true and
//	ref has output true and cv has reference ref and
//	cv has reference ref2 and
//	ref2 has codeBlock cb and
//	ref2 has setterArgument true and
//	ref2 has beginsAt loc order by cb, loc.
//	
//Print: "Methods with no implicit inputs or outputs".
//Ask: "select ?cb where {?cb <rdf:type> <Method> .
//	FILTER NOT EXISTS {?ref <codeBlock> ?cb .
//					   ?ref <isImplicit> true}}".
//
//Print: "Containment:".
//Ask: "select ?s ?p ?o where {?s <rdf:type> <Class> . ?s ?p ?o . VALUES ?p {<containedIn>}}".
//
//Print: "Method calls:".
////Graph: "select ?cb ?p ?m where {?m ?p ?mc . ?mc <codeBlock> ?cb . VALUES ?p {<calls>}}".
//Ask: "select ?cb ?p ?m ?loc where {?m ?p ?mc . ?mc <codeBlock> ?cb . ?mc <beginsAt> ?loc . VALUES ?p {<calls>}} order by ?loc".
//
//Print: "External methods:".
//Ask: "select ?m where {?m <rdf:type> <ExternalMethod>}".

Print: "Methods without implicit inputs or outputs:".
Ask: "select ?m where {?m <rdf:type> <Method> . MINUS {?ref <codeBlock> ?m . ?ref <isImplicit> true} }".

Print: "Methods doing computation:".
//Ask: "select ?m where {?m <doesComputation> true}".
Ask: select m where m doesComputation true.
		
Print: "Methods in this code without implicit inputs or outputs and that do computation:".
Ask InterestingCode: "select ?m ?b ?e where {?m <rdf:type> <Method> . ?m <doesComputation> true . OPTIONAL {?m <beginsAt> ?b . ?m <endsAt> ?e} .
		MINUS {
			{?ref <codeBlock> ?m . ?ref <isImplicit> true}
			UNION {?m <rdf:type> <ExternalMethod>} } }".

//Ask: "select ?c ?r ?b where {?c <rdf:type> CodeVariable .
//	?c <reference> ?r . ?r <beginsAt> ?b}".
// 
// Ask: "select distinct ?cb ?cv ?loc where {
//	?ref <isImplicit> true . ?cv <reference> ?ref . ?ref <codeBlock> ?cb . 
//	?ref <beginsAt> ?loc . ?cb <rdf:type> <Method>} order by ?loc".
 
// Ask: "select distinct ?cb ?cv ?intrue ?outtrue where {?cv <reference> ?ref . ?ref <codeBlock> ?cb . ?ref <input> ?intrue . ?ref <output> ?outtrue}".
 
// Ask: "select ?ref ?cb where {?ref <codeBlock> ?cb}".
// 
// Ask: select m where m is a Method.
 
// Ask: "select ?cv ?m where {?cv <reference> ?ref . ?ref <isImplicit> true . ?ref <codeBlock> ?m}".

Print: "Arguments and type for CAL_SOS:".
Ask: "select ?arg ?argName ?argtyp where {<Mach.CAL_SOS> <cmArguments>/<sadllistmodel:rest>*/<sadllistmodel:first> ?arg . ?arg <varName> ?argName . OPTIONAL{?arg <varType> ?argtyp}}".

Print: "Rreturned type for CAL_SOS:".
Ask: "select ?rettyp where {<Mach.CAL_SOS> <cmReturnTypes>/<sadllistmodel:rest>*/<sadllistmodel:first> ?rettyp}".

//External Mach.CAL_SOS(double T, double G, double R, double Q) returns double: "http://com.ge.research.sadl.darpa.aske.answer/Mach_java#Mach.CAL_SOS".
//Mach.CAL_SOS has expression (a Script with language Java, with script ""), has expression (a Script with language Python, with script "").

External Mach.CAL_SOS(double T, double G, double R, double Q) returns double: "http://com.ge.research.sadl.darpa.aske.answer/Mach_java#Mach.CAL_SOS".
Mach.CAL_SOS has expression (a Script with language Java, with script 
"public double CAL_SOS(double T, double G, double R, double Q) {
    double WOW = 1 + (G - 1) / (1 + (G - 1) * Math.pow((Q / T), 2) * Math.exp(Q / T) / Math.pow((Math.exp(Q / T) - 1), 2));
    return (Math.sqrt(32.174 * T * R * WOW));
}"
), has expression (a Script with language Python, with script "#!/usr/bin/env python
\"\"\" generated source for module inputfile \"\"\"
class Mach(object):
    \"\"\" generated source for class Mach \"\"\"
    def CAL_SOS(self, T, G, R, Q):
        \"\"\" generated source for method CAL_SOS \"\"\"
        WOW = 1 + (G - 1) / (1 + (G - 1) * Math.pow((Q / T), 2) * Math.exp(Q / T) / Math.pow((Math.exp(Q / T) - 1), 2))
        return (Math.sqrt(32.174 * T * R * WOW))

").