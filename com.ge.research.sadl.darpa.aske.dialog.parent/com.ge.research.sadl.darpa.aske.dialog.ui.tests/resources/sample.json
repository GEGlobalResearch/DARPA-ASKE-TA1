{
  "equationModel": "\n\"\"\" Global variable declarations \"\"\" \neta = [0]*20\npt = [0]*20\nprat = [0]*20\ntt = [0]*20\n\ndef getFreeStream0():\n    \"\"\" Specifying global scope for implicit variables \"\"\"\n    global a0, alt, altd, cpair, fsmach, gama, lconv1, lconv2, ps0, psout, q0, rgas, rho0, ts0, tsout, u0, u0d\n\n    \"\"\" generated source for method getFreeStream0 \"\"\"\n    rgas = 1718.\n    #  ft2/sec2 R \n    alt = altd / lconv1\n    if alt < 36152.:\n        ts0 = 518.6 - 3.56 * alt / 1000.\n        ps0 = 2116. * tf.math.pow(ts0 / 518.6, 5.256)\n    if alt >= 36152. and alt <= 82345.:\n        # // Stratosphere\n        ts0 = 389.98\n        ps0 = 2116. * 0.2236 * tf.math.exp((36000. - alt) / (53.35 * 389.98))\n    if alt >= 82345.:\n        ts0 = 389.98 + 1.645 * (alt - 82345) / 1000.\n        ps0 = 2116. * 0.02456 * tf.math.pow(ts0 / 389.98, -11.388)\n    a0 = tf.math.sqrt(gama * rgas * ts0)\n    # /* speed of sound ft/sec */\n    u0 = u0d / lconv2 * 5280. / 3600.\n    # /* airspeed ft/sec */\n    # //AG: input var is u0d\n    fsmach = u0 / a0\n    q0 = gama / 2.0 * fsmach * fsmach * ps0\n    if u0 > 0.0001:\n        rho0 = q0 / (u0 * u0)\n    else:\n        rho0 = 1.0\n    tt[0] = ts0 * (1.0 + 0.5 * (gama - 1.0) * fsmach * fsmach)\n    pt[0] = ps0 * tf.math.pow(tt[0] / ts0, gama / (gama - 1.0))\n    ps0 = ps0 / 144.\n    pt[0] = pt[0] / 144.\n    cpair = getCp(tt[0], gamopt)\n    # /*BTU/lbm R */\n    tsout = ts0\n    psout = ps0\n    return\n\ndef loadCF6():\n    \"\"\" Specifying global scope for implicit variables \"\"\"\n    global a2, a2d, a4, a4p, a8d, a8max, a8rat, abflag, ac, acore, afan, altd, altmax, altmt, arsched, byprat, dburner, dcomp, dfan, diameng, dinlt, dnozl, dturbin, entype, fhv, fhvd, fueltype, gama, gamopt, mburner, mcomp, mfan, minlt, mnozl, mturbin, ncflag, ntflag, p3fp2d, p3p2d, pt2flag, tburner, tcomp, tfan, tinlt, tnozl, tt4, tt4d, tt7, tt7d, tturbin, u0d, u0max, u0mt, weight, wtflag\n\n    \"\"\" generated source for method loadCF6 \"\"\"\n    entype = 2\n    abflag = 0\n    fueltype = 0\n    fhvd = fhv = 18600.\n    tt[4] = tt4 = tt4d = 2500.\n    # turbine inlet temp (GE90 uses 2900)\n    tt[7] = tt7 = tt7d = 2500.\n    prat[3] = p3p2d = 21.86\n    # //high-press compression ratio (new engines, 30)\n    prat[13] = p3fp2d = 1.745\n    # //low-press compression ratio (new engines 1.5)\n    byprat = 3.3\n    # // fan bypass ratio =  fan flow/core flow (GE90 uses 9, GENx 11)\n    acore = 6.965\n    # // area of core (typically at station 2)\n    afan = acore * (1.0 + byprat)\n    # // area of fan\n    a2d = a2 = afan\n    # // \n    diameng = tf.math.sqrt(4.0 * a2d / 3.14159)\n    # // diameter of engine \n    a4 = 0.290\n    # // area of core (typically at station 4)\n    a4p = 1.131\n    ac = 0.9 * a2\n    gama = 1.4\n    gamopt = 1\n    pt2flag = 0\n    eta[2] = 1.0\n    prat[2] = 1.0\n    prat[4] = 1.0\n    eta[3] = 0.959\n    # //compressor efficiency\n    eta[4] = 0.984\n    eta[5] = 0.982\n    eta[7] = 1.0\n    eta[13] = 1.0\n    a8d = 2.436\n    # //exit area\n    a8max = 0.35\n    a8rat = 0.35\n    u0max = u0mt\n    u0d = 0.0\n    altmax = altmt\n    altd = 0.0\n    arsched = 0\n    wtflag = 0\n    weight = 8229.\n    # //engine weight\n    minlt = 1\n    dinlt = 170.\n    tinlt = 900.\n    mfan = 2\n    dfan = 293.\n    tfan = 1500.\n    mcomp = 0\n    dcomp = 293.\n    tcomp = 1600.\n    mburner = 4\n    dburner = 515.\n    tburner = 2500.\n    mturbin = 4\n    dturbin = 515.\n    tturbin = 2500.\n    mnozl = 3\n    dnozl = 515.\n    tnozl = 2500.\n    ncflag = 0\n    ntflag = 0\n    return\n\ndef setDefaults():\n    \"\"\" Specifying global scope for implicit variables \"\"\"\n    global a2, a2d, a2max, a2min, a4, a8, a8d, a8max, a8min, a8rat, abflag, ac, aconv, acore, aexsched, afan, altd, altmax, altmin, altmr, altmt, arexit, arexitd, arexmn, arexmx, arsched, arth, arthd, arthmn, arthmx, athsched, bconv, bypmax, bypmin, byprat, counter, cprmax, cprmin, dburner, dcomp, dconv, dfan, diamax, diameng, diamin, dinlt, dnozl, dnozr, dturbin, econv, econv2, entype, etmax, etmin, factor, factp, fconv, fhv, fhvd, fireflag, flconv, fprmax, fprmin, fueltype, g0, g0d, gama, gamopt, inflag, inptype, lconv1, lconv2, lunits, mburner, mcomp, mconv1, mconv2, mfan, minlt, mnozl, mnozr, move, mturbin, ncflag, ntflag, p3fp2d, p3p2d, pconv, pltkeep, plttyp, pmax, pt2flag, pt4max, showcom, siztype, sldloc, sldplt, t4max, t4min, t7max, t7min, tburner, tcomp, tconv, tfan, thrmax, thrmin, throtl, tinlt, tmax, tmin, tnozl, tnozr, tref, tt4, tt4d, tt7, tt7d, tturbin, u0d, u0max, u0min, u0mr, u0mt, varflag, vmn1, vmn2, vmn3, vmn4, vmx1, vmx2, vmx3, vmx4, weight, wtflag, xtranp, xtrans, ytranp, ytrans\n\n    \"\"\" generated source for method setDefaults \"\"\"\n    i = 0\n    move = 0\n    inptype = 0\n    siztype = 0\n    lunits = 0\n    lconv1 = 1.0\n    lconv2 = 1.0\n    fconv = 1.0\n    mconv1 = 1.0\n    pconv = 1.0\n    econv = 1.0\n    aconv = 1.0\n    bconv = 1.0\n    mconv2 = 1.0\n    dconv = 1.0\n    flconv = 1.0\n    econv2 = 1.0\n    tconv = 1.0\n    tref = 459.6\n    g0 = g0d = 32.2\n    counter = 0\n    showcom = 0\n    plttyp = 3\n    pltkeep = 0\n    entype = 0\n    inflag = 0\n    varflag = 0\n    pt2flag = 0\n    wtflag = 0\n    fireflag = 0\n    gama = 1.4\n    gamopt = 1\n    u0d = 0.0\n    altd = 0.0\n    throtl = 100.\n    while i <= 19:\n        trat[i] = 1.0\n        tt[i] = 518.6\n        prat[i] = 1.0\n        pt[i] = 14.7\n        eta[i] = 1.0\n        i += 1\n    tt[4] = tt4 = tt4d = 2500.\n    tt[7] = tt7 = tt7d = 2500.\n    prat[3] = p3p2d = 8.0\n    prat[13] = p3fp2d = 2.0\n    byprat = 1.0\n    abflag = 0\n    fueltype = 0\n    fhvd = fhv = 18600.\n    a2d = a2 = acore = 2.0\n    diameng = tf.math.sqrt(4.0 * a2d / 3.14159)\n    ac = 0.9 * a2\n    a8rat = 0.35\n    a8 = 0.7\n    a8d = 0.40\n    arsched = 0\n    afan = 2.0\n    a4 = 0.418\n    athsched = 1\n    aexsched = 1\n    arthmn = 0.1\n    arthmx = 1.5\n    arexmn = 1.0\n    arexmx = 10.0\n    arthd = arth = 0.4\n    arexit = arexitd = 3.0\n    u0mt = 1500.\n    u0mr = 4500.\n    altmt = 60000.\n    altmr = 100000.\n    u0min = 0.0\n    u0max = u0mt\n    altmin = 0.0\n    altmax = altmt\n    thrmin = 30\n    thrmax = 100\n    etmin = 0.5\n    etmax = 1.0\n    cprmin = 1.0\n    cprmax = 50.0\n    bypmin = 0.0\n    bypmax = 10.0\n    fprmin = 1.0\n    fprmax = 2.0\n    t4min = 1000.0\n    t4max = 3200.0\n    t7min = 1000.0\n    t7max = 4000.0\n    a8min = 0.1\n    a8max = 0.4\n    a2min = 0.001\n    a2max = 50.\n    pt4max = 1.0\n    diamin = tf.math.sqrt(4.0 * a2min / 3.14159)\n    diamax = tf.math.sqrt(4.0 * a2max / 3.14159)\n    pmax = 6000.0\n    tmin = -300.0 + tref\n    tmax = 600.0 + tref\n    vmn1 = u0min\n    vmx1 = u0max\n    vmn2 = altmin\n    vmx2 = altmax\n    vmn3 = thrmin\n    vmx3 = thrmax\n    vmn4 = arexmn\n    vmx4 = arexmx\n    xtrans = 125.0\n    ytrans = 115.0\n    factor = 35.\n    sldloc = 75\n    xtranp = 80.0\n    ytranp = 180.0\n    factp = 27.\n    sldplt = 130\n    weight = 1000.\n    minlt = 1\n    dinlt = 170.2\n    tinlt = 900.\n    mfan = 2\n    dfan = 293.02\n    tfan = 1500.\n    mcomp = 2\n    dcomp = 293.02\n    tcomp = 1500.\n    mburner = 4\n    dburner = 515.2\n    tburner = 2500.\n    mturbin = 4\n    dturbin = 515.2\n    tturbin = 2500.\n    mnozl = 3\n    dnozl = 515.2\n    tnozl = 2500.\n    mnozr = 5\n    dnozr = 515.2\n    tnozr = 4500.\n    ncflag = 0\n    ntflag = 0\n    return\n\ndef getCp( temp, opt):\n\n    \"\"\" generated source for method getCp \"\"\"\n    #  Utility to get cp as a function of temp \n    number = 0.0\n    a = 0.0\n    b = 0.0\n    c = 0.0\n    d = 0.0\n    # /* BTU/R */\n    a = -4.4702130e-13\n    b = -5.1286514e-10\n    c = 2.8323331e-05\n    d = 0.2245283\n    if opt == 0:\n        number = 0.2399\n    else:\n        number = a * temp * temp * temp + b * temp * temp + c * temp + d\n    return (number)\n\n\ndef getResponse(u0d_val):\n    global u0d\n\n    setDefaults()\n\n    loadCF6()\n\n    u0d = u0d_val\n    getFreeStream0()\n\n    return fsmach\n",
  "modelName": "getResponse",
  "outputVariables": [
    {
      "name": "fsmach",
      "type": "float"
    }
  ],
  "inputVariables": [
    {
      "name": "u0d",
      "type": "float"
    }
  ]
}