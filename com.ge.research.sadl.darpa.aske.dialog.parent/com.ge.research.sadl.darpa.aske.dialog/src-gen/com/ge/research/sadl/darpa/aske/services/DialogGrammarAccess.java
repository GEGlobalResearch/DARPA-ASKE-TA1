/*
 * generated by Xtext 2.14.0.RC1
 */
package com.ge.research.sadl.darpa.aske.services;

import com.ge.research.sadl.services.SADLGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DialogGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DialogModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ge.research.sadl.darpa.aske.Dialog.DialogModel");
		private final RuleCall cSadlModelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DialogModel sadl::SadlModel:
		//	super::SadlModel;
		@Override public ParserRule getRule() { return rule; }
		
		//super::SadlModel
		public RuleCall getSadlModelParserRuleCall() { return cSadlModelParserRuleCall; }
	}
	public class SadlModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ge.research.sadl.darpa.aske.Dialog.SadlModelElement");
		private final RuleCall cDialogStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//@Override
		//SadlModelElement sadl::SadlModelElement:
		//	DialogStatement;
		@Override public ParserRule getRule() { return rule; }
		
		////		super::SadlModelElement
		////		super::EquationStatement EOS |
		////		super::ExternalEquationStatement EOS |
		//DialogStatement
		public RuleCall getDialogStatementParserRuleCall() { return cDialogStatementParserRuleCall; }
	}
	public class DialogStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ge.research.sadl.darpa.aske.Dialog.DialogStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDialogQuestionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cEOSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DialogStatement sadl::ExpressionScope:
		//	DialogQuestion EOS;
		@Override public ParserRule getRule() { return rule; }
		
		//DialogQuestion EOS
		public Group getGroup() { return cGroup; }
		
		//DialogQuestion
		public RuleCall getDialogQuestionParserRuleCall_0() { return cDialogQuestionParserRuleCall_0; }
		
		//EOS
		public RuleCall getEOSParserRuleCall_1() { return cEOSParserRuleCall_1; }
	}
	public class DialogQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ge.research.sadl.darpa.aske.Dialog.DialogQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArticleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArticleAnArticleParserRuleCall_2_0 = (RuleCall)cArticleAssignment_2.eContents().get(0);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetSadlTypeReferenceParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DialogQuestion:
		//	'What' 'is' article=AnArticle? target=SadlTypeReference '?';
		@Override public ParserRule getRule() { return rule; }
		
		//'What' 'is' article=AnArticle? target=SadlTypeReference '?'
		public Group getGroup() { return cGroup; }
		
		//'What'
		public Keyword getWhatKeyword_0() { return cWhatKeyword_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//article=AnArticle?
		public Assignment getArticleAssignment_2() { return cArticleAssignment_2; }
		
		//AnArticle
		public RuleCall getArticleAnArticleParserRuleCall_2_0() { return cArticleAnArticleParserRuleCall_2_0; }
		
		//target=SadlTypeReference
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//SadlTypeReference
		public RuleCall getTargetSadlTypeReferenceParserRuleCall_3_0() { return cTargetSadlTypeReferenceParserRuleCall_3_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_4() { return cQuestionMarkKeyword_4; }
	}
	
	
	private final DialogModelElements pDialogModel;
	private final SadlModelElementElements pSadlModelElement;
	private final DialogStatementElements pDialogStatement;
	private final DialogQuestionElements pDialogQuestion;
	
	private final Grammar grammar;
	
	private final SADLGrammarAccess gaSADL;

	@Inject
	public DialogGrammarAccess(GrammarProvider grammarProvider,
			SADLGrammarAccess gaSADL) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSADL = gaSADL;
		this.pDialogModel = new DialogModelElements();
		this.pSadlModelElement = new SadlModelElementElements();
		this.pDialogStatement = new DialogStatementElements();
		this.pDialogQuestion = new DialogQuestionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ge.research.sadl.darpa.aske.Dialog".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public SADLGrammarAccess getSADLGrammarAccess() {
		return gaSADL;
	}

	
	//DialogModel sadl::SadlModel:
	//	super::SadlModel;
	public DialogModelElements getDialogModelAccess() {
		return pDialogModel;
	}
	
	public ParserRule getDialogModelRule() {
		return getDialogModelAccess().getRule();
	}
	
	//@Override
	//SadlModelElement sadl::SadlModelElement:
	//	DialogStatement;
	public SadlModelElementElements getSadlModelElementAccess() {
		return pSadlModelElement;
	}
	
	public ParserRule getSadlModelElementRule() {
		return getSadlModelElementAccess().getRule();
	}
	
	//DialogStatement sadl::ExpressionScope:
	//	DialogQuestion EOS;
	public DialogStatementElements getDialogStatementAccess() {
		return pDialogStatement;
	}
	
	public ParserRule getDialogStatementRule() {
		return getDialogStatementAccess().getRule();
	}
	
	//DialogQuestion:
	//	'What' 'is' article=AnArticle? target=SadlTypeReference '?';
	public DialogQuestionElements getDialogQuestionAccess() {
		return pDialogQuestion;
	}
	
	public ParserRule getDialogQuestionRule() {
		return getDialogQuestionAccess().getRule();
	}
	
	//SadlModel:
	//	'uri' baseUri=STRING ('alias' alias=ID)? ('version' version=STRING)?
	//	annotations+=SadlAnnotation* EOS
	//	imports+=SadlImport*
	//	elements+=super::SadlModelElement*;
	public SADLGrammarAccess.SadlModelElements getSadlModelAccess() {
		return gaSADL.getSadlModelAccess();
	}
	
	public ParserRule getSadlModelRule() {
		return getSadlModelAccess().getRule();
	}
	
	//SadlAnnotation:
	//	','? '(' type=('alias' | 'note') contents+=STRING (',' contents+=STRING)* ')';
	public SADLGrammarAccess.SadlAnnotationElements getSadlAnnotationAccess() {
		return gaSADL.getSadlAnnotationAccess();
	}
	
	public ParserRule getSadlAnnotationRule() {
		return getSadlAnnotationAccess().getRule();
	}
	
	//SadlImport:
	//	'import' importedResource=[SadlModel|STRING] ('as' alias=ID)? EOS;
	public SADLGrammarAccess.SadlImportElements getSadlImportAccess() {
		return gaSADL.getSadlImportAccess();
	}
	
	public ParserRule getSadlImportRule() {
		return getSadlImportAccess().getRule();
	}
	
	//EquationStatement:
	//	'Equation' EquationSignature
	//	body=Expression? ('return' retval=Expression)? ('where' where=Expression)?;
	public SADLGrammarAccess.EquationStatementElements getEquationStatementAccess() {
		return gaSADL.getEquationStatementAccess();
	}
	
	public ParserRule getEquationStatementRule() {
		return getEquationStatementAccess().getRule();
	}
	
	//ExternalEquationStatement:
	//	'External' EquationSignature
	//	uri=STRING ('located' 'at' location=STRING)? ('where' where=Expression)?;
	public SADLGrammarAccess.ExternalEquationStatementElements getExternalEquationStatementAccess() {
		return gaSADL.getExternalEquationStatementAccess();
	}
	
	public ParserRule getExternalEquationStatementRule() {
		return getExternalEquationStatementAccess().getRule();
	}
	
	//fragment EquationSignature returns AbstractSadlEquation:
	//	name=SadlResource '(' (parameter+=SadlParameterDeclaration (',' parameter+=SadlParameterDeclaration)*)? ')' 'returns'
	//	(returnType+=SadlReturnDeclaration (',' returnType+=SadlReturnDeclaration)*) ':';
	public SADLGrammarAccess.EquationSignatureElements getEquationSignatureAccess() {
		return gaSADL.getEquationSignatureAccess();
	}
	
	public ParserRule getEquationSignatureRule() {
		return getEquationSignatureAccess().getRule();
	}
	
	//SadlParameterDeclaration:
	//	type=SadlPrimaryTypeReference name=SadlResource
	//	| unknown='--'
	//	| ellipsis='...';
	public SADLGrammarAccess.SadlParameterDeclarationElements getSadlParameterDeclarationAccess() {
		return gaSADL.getSadlParameterDeclarationAccess();
	}
	
	public ParserRule getSadlParameterDeclarationRule() {
		return getSadlParameterDeclarationAccess().getRule();
	}
	
	//SadlReturnDeclaration:
	//	type=SadlPrimaryTypeReference
	//	| none='None'
	//	| unknown='--';
	public SADLGrammarAccess.SadlReturnDeclarationElements getSadlReturnDeclarationAccess() {
		return gaSADL.getSadlReturnDeclarationAccess();
	}
	
	public ParserRule getSadlReturnDeclarationRule() {
		return getSadlReturnDeclarationAccess().getRule();
	}
	
	//// These are the things that translate directly to OWL.
	//SadlStatement:
	//	SadlResource ({SadlClassOrPropertyDeclaration.classOrProperty+=current} 'is' 'a' ('top-level'? 'class'
	//	| 'type' 'of' superElement=SadlPrimaryTypeReference facet=SadlDataTypeFacet?)
	//	(describedBy+=SadlPropertyDeclarationInClass+ | (','? restrictions+=SadlPropertyRestriction)+)?
	//	| {SadlProperty.nameOrRef=current} primaryDeclaration?='is' 'a' 'property' (','?
	//	restrictions+=SadlPropertyRestriction)*
	//	| {SadlProperty.nameOrRef=current} (','? restrictions+=SadlPropertyRestriction)+
	//	| {SadlSameAs.nameOrRef=current} 'is' 'the' 'same' 'as' complement?='not'? sameAs=SadlTypeReference
	//	| {SadlDifferentFrom.nameOrRef=current} 'is' 'not' 'the' 'same' 'as' notTheSameAs=SadlTypeReference
	//	| {SadlInstance.nameOrRef=current} ('is' AnArticle type=SadlTypeReference)? (listInitializer=SadlValueList |
	//	propertyInitializers+=SadlPropertyInitializer+)?
	//	| {SadlDisjointClasses.classes+=current} ('and' classes+=SadlResource)+ 'are' 'disjoint') |
	//	{SadlClassOrPropertyDeclaration} '{' classOrProperty+=SadlResource (',' classOrProperty+=SadlResource)* '}' 'are'
	//	(('top-level'? 'classes' | 'types' 'of' | 'instances' 'of' superElement=SadlPrimaryTypeReference)
	//	describedBy+=SadlPropertyDeclarationInClass*
	//	| {SadlDisjointClasses.types+=current} 'disjoint'
	//	| {SadlDifferentFrom.types+=current} complement?='not'? 'the' 'same') | {SadlProperty} AnArticle? 'relationship' 'of'
	//	from=SadlTypeReference 'to' to=SadlTypeReference 'is' property=SadlResource
	//	| AnArticle SadlTypeReference ({SadlInstance.type=current} instance=SadlResource?
	//	propertyInitializers+=SadlPropertyInitializer*
	//	| {SadlNecessaryAndSufficient.subject=current} 'is' AnArticle object=SadlResource 'only' 'if'
	//	propConditions+=SadlPropertyCondition ('and' propConditions+=SadlPropertyCondition)*);
	public SADLGrammarAccess.SadlStatementElements getSadlStatementAccess() {
		return gaSADL.getSadlStatementAccess();
	}
	
	public ParserRule getSadlStatementRule() {
		return getSadlStatementAccess().getRule();
	}
	
	//SadlPropertyCondition:
	//	property=[SadlResource|QNAME] cond+=SadlCondition;
	public SADLGrammarAccess.SadlPropertyConditionElements getSadlPropertyConditionAccess() {
		return gaSADL.getSadlPropertyConditionAccess();
	}
	
	public ParserRule getSadlPropertyConditionRule() {
		return getSadlPropertyConditionAccess().getRule();
	}
	
	//SadlPropertyInitializer:
	//	','? ('with' | 'has')? property=[SadlResource|QNAME] (value=SadlExplicitValue | '(' value=SadlNestedInstance ')') |
	//	','? 'is' property=[SadlResource|QNAME] 'of' type=[SadlResource|QNAME] | ','? 'of' property=[SadlResource|QNAME] 'is'
	//	(value=SadlExplicitValue | '(' value=SadlNestedInstance ')');
	public SADLGrammarAccess.SadlPropertyInitializerElements getSadlPropertyInitializerAccess() {
		return gaSADL.getSadlPropertyInitializerAccess();
	}
	
	public ParserRule getSadlPropertyInitializerRule() {
		return getSadlPropertyInitializerAccess().getRule();
	}
	
	//SadlNestedInstance SadlInstance:
	//	{SadlNestedInstance} (instance=SadlResource 'is' article=AnArticle type=SadlTypeReference
	//	propertyInitializers+=SadlPropertyInitializer*
	//	| article=AnArticle type=SadlTypeReference instance=SadlResource? propertyInitializers+=SadlPropertyInitializer*);
	public SADLGrammarAccess.SadlNestedInstanceElements getSadlNestedInstanceAccess() {
		return gaSADL.getSadlNestedInstanceAccess();
	}
	
	public ParserRule getSadlNestedInstanceRule() {
		return getSadlNestedInstanceAccess().getRule();
	}
	
	//SadlResource:
	//	name=[SadlResource|QNAME] annotations+=SadlAnnotation*;
	public SADLGrammarAccess.SadlResourceElements getSadlResourceAccess() {
		return gaSADL.getSadlResourceAccess();
	}
	
	public ParserRule getSadlResourceRule() {
		return getSadlResourceAccess().getRule();
	}
	
	//SadlDataTypeFacet:
	//	{SadlDataTypeFacet} ('(' | minInclusive?='[') min=FacetNumber? ',' max=FacetNumber? (maxInclusive?=']' | ')') |
	//	regex=STRING
	//	| 'length' (len=FacetNumber | minlen=FacetNumber '-' maxlen=(FacetNumber | '*')) | '{' values+=FacetValue (','?
	//	values+=FacetValue)* '}';
	public SADLGrammarAccess.SadlDataTypeFacetElements getSadlDataTypeFacetAccess() {
		return gaSADL.getSadlDataTypeFacetAccess();
	}
	
	public ParserRule getSadlDataTypeFacetRule() {
		return getSadlDataTypeFacetAccess().getRule();
	}
	
	//FacetNumber:
	//	'-'? AnyNumber;
	public SADLGrammarAccess.FacetNumberElements getFacetNumberAccess() {
		return gaSADL.getFacetNumberAccess();
	}
	
	public ParserRule getFacetNumberRule() {
		return getFacetNumberAccess().getRule();
	}
	
	//FacetValue:
	//	STRING | FacetNumber;
	public SADLGrammarAccess.FacetValueElements getFacetValueAccess() {
		return gaSADL.getFacetValueAccess();
	}
	
	public ParserRule getFacetValueRule() {
		return getFacetValueAccess().getRule();
	}
	
	//// TypeReferences
	//SadlTypeReference:
	//	SadlUnionType;
	public SADLGrammarAccess.SadlTypeReferenceElements getSadlTypeReferenceAccess() {
		return gaSADL.getSadlTypeReferenceAccess();
	}
	
	public ParserRule getSadlTypeReferenceRule() {
		return getSadlTypeReferenceAccess().getRule();
	}
	
	//SadlUnionType SadlTypeReference:
	//	SadlIntersectionType ({SadlUnionType.left=current} 'or' right=SadlIntersectionType)*;
	public SADLGrammarAccess.SadlUnionTypeElements getSadlUnionTypeAccess() {
		return gaSADL.getSadlUnionTypeAccess();
	}
	
	public ParserRule getSadlUnionTypeRule() {
		return getSadlUnionTypeAccess().getRule();
	}
	
	//SadlIntersectionType SadlTypeReference:
	//	SadlPrimaryTypeReference ({SadlIntersectionType.left=current} 'and' right=SadlPrimaryTypeReference)*;
	public SADLGrammarAccess.SadlIntersectionTypeElements getSadlIntersectionTypeAccess() {
		return gaSADL.getSadlIntersectionTypeAccess();
	}
	
	public ParserRule getSadlIntersectionTypeRule() {
		return getSadlIntersectionTypeAccess().getRule();
	}
	
	//SadlPrimaryTypeReference SadlTypeReference:
	//	{SadlSimpleTypeReference} type=[SadlResource|QNAME] list?='List'?
	//	| {SadlPrimitiveDataType} primitiveType=SadlDataType list?='List'?
	//	| '(' SadlPropertyCondition ')'
	//	| '{' SadlTypeReference '}';
	public SADLGrammarAccess.SadlPrimaryTypeReferenceElements getSadlPrimaryTypeReferenceAccess() {
		return gaSADL.getSadlPrimaryTypeReferenceAccess();
	}
	
	public ParserRule getSadlPrimaryTypeReferenceRule() {
		return getSadlPrimaryTypeReferenceAccess().getRule();
	}
	
	//enum SadlDataType:
	//	string | boolean | decimal | int | long | float | double | duration | dateTime | time | date |
	//	gYearMonth | gYear | gMonthDay | gDay | gMonth | hexBinary | base64Binary | anyURI |
	//	integer | negativeInteger | nonNegativeInteger | positiveInteger | nonPositiveInteger |
	//	byte | unsignedByte | unsignedInt | anySimpleType;
	public SADLGrammarAccess.SadlDataTypeElements getSadlDataTypeAccess() {
		return gaSADL.getSadlDataTypeAccess();
	}
	
	public EnumRule getSadlDataTypeRule() {
		return getSadlDataTypeAccess().getRule();
	}
	
	//// Class declarations may also describe the class's properties.
	//SadlPropertyDeclarationInClass SadlProperty:
	//	','? 'described' 'by' nameDeclarations+=SadlResource restrictions+=SadlPropertyRestriction*;
	public SADLGrammarAccess.SadlPropertyDeclarationInClassElements getSadlPropertyDeclarationInClassAccess() {
		return gaSADL.getSadlPropertyDeclarationInClassAccess();
	}
	
	public ParserRule getSadlPropertyDeclarationInClassRule() {
		return getSadlPropertyDeclarationInClassAccess().getRule();
	}
	
	//SadlPropertyRestriction:
	//	SadlCondition
	//	| {SadlTypeAssociation} ('describes' | 'of') domain=SadlTypeReference
	//	| {SadlRangeRestriction} ('has' | 'with') ('a' singleValued?='single' 'value' | 'values') 'of' 'type'
	//	(typeonly=('class' | 'data') | range=SadlPrimaryTypeReference facet=SadlDataTypeFacet?) | {SadlIsInverseOf} 'is'
	//	'the' 'inverse' 'of' otherProperty=[SadlResource|QNAME] | {SadlIsTransitive} 'is' 'transitive'
	//	| {SadlIsSymmetrical} 'is' 'symmetrical'
	//	| {SadlIsAnnotation} 'is' 'a' 'type' 'of' 'annotation'
	//	| {SadlDefaultValue} 'has' ('level' level=NUMBER)? 'default' defValue=SadlExplicitValue
	//	| {SadlIsFunctional} 'has' 'a' 'single' (inverse?='subject' | 'value')?
	//	| {SadlMustBeOneOf} 'must' 'be' 'one' 'of' '{' values+=SadlExplicitValue (',' values+=SadlExplicitValue)* '}'
	//	| {SadlCanOnlyBeOneOf} 'can' 'only' 'be' 'one' 'of' '{' values+=SadlExplicitValue (',' values+=SadlExplicitValue)*
	//	'}';
	public SADLGrammarAccess.SadlPropertyRestrictionElements getSadlPropertyRestrictionAccess() {
		return gaSADL.getSadlPropertyRestrictionAccess();
	}
	
	public ParserRule getSadlPropertyRestrictionRule() {
		return getSadlPropertyRestrictionAccess().getRule();
	}
	
	//SadlCondition:
	//	SadlAllValuesCondition
	//	| SadlHasValueCondition
	//	| SadlCardinalityCondition;
	public SADLGrammarAccess.SadlConditionElements getSadlConditionAccess() {
		return gaSADL.getSadlConditionAccess();
	}
	
	public ParserRule getSadlConditionRule() {
		return getSadlConditionAccess().getRule();
	}
	
	//SadlAllValuesCondition:
	//	'only' ('has' | 'with') 'values' 'of' 'type' type=SadlPrimaryTypeReference facet=SadlDataTypeFacet?;
	public SADLGrammarAccess.SadlAllValuesConditionElements getSadlAllValuesConditionAccess() {
		return gaSADL.getSadlAllValuesConditionAccess();
	}
	
	public ParserRule getSadlAllValuesConditionRule() {
		return getSadlAllValuesConditionAccess().getRule();
	}
	
	//SadlHasValueCondition:
	//	'always' ('has' | 'with') 'value' (restriction=SadlExplicitValue | '(' restriction=SadlNestedInstance ')');
	public SADLGrammarAccess.SadlHasValueConditionElements getSadlHasValueConditionAccess() {
		return gaSADL.getSadlHasValueConditionAccess();
	}
	
	public ParserRule getSadlHasValueConditionRule() {
		return getSadlHasValueConditionAccess().getRule();
	}
	
	//SadlCardinalityCondition:
	//	('has' | 'with') ('at' operator=('least' | 'most') | 'exactly')?
	//	cardinality=CardinalityValue ('value' | 'values') ('of' 'type' type=SadlPrimaryTypeReference
	//	facet=SadlDataTypeFacet?)?;
	public SADLGrammarAccess.SadlCardinalityConditionElements getSadlCardinalityConditionAccess() {
		return gaSADL.getSadlCardinalityConditionAccess();
	}
	
	public ParserRule getSadlCardinalityConditionRule() {
		return getSadlCardinalityConditionAccess().getRule();
	}
	
	//CardinalityValue:
	//	NUMBER | 'one';
	public SADLGrammarAccess.CardinalityValueElements getCardinalityValueAccess() {
		return gaSADL.getCardinalityValueAccess();
	}
	
	public ParserRule getCardinalityValueRule() {
		return getCardinalityValueAccess().getRule();
	}
	
	//SadlExplicitValue:
	//	SadlExplicitValueLiteral |
	//	=> ({SadlUnaryExpression} operator=('-' | 'not') value=SadlExplicitValueLiteral);
	public SADLGrammarAccess.SadlExplicitValueElements getSadlExplicitValueAccess() {
		return gaSADL.getSadlExplicitValueAccess();
	}
	
	public ParserRule getSadlExplicitValueRule() {
		return getSadlExplicitValueAccess().getRule();
	}
	
	//SadlExplicitValueLiteral:
	//	SadlResource // e.g., George
	//	| {SadlNumberLiteral} literalNumber=AnyNumber -> unit=UNIT?
	//	| {SadlStringLiteral} literalString=STRING
	//	| {SadlBooleanLiteral} (truethy?='true' | 'false') | SadlValueList
	//	| {SadlConstantLiteral} term=('PI' | 'e' | 'known');
	public SADLGrammarAccess.SadlExplicitValueLiteralElements getSadlExplicitValueLiteralAccess() {
		return gaSADL.getSadlExplicitValueLiteralAccess();
	}
	
	public ParserRule getSadlExplicitValueLiteralRule() {
		return getSadlExplicitValueLiteralAccess().getRule();
	}
	
	//UNIT:
	//	STRING | ID;
	public SADLGrammarAccess.UNITElements getUNITAccess() {
		return gaSADL.getUNITAccess();
	}
	
	public ParserRule getUNITRule() {
		return getUNITAccess().getRule();
	}
	
	//SadlValueList:
	//	{SadlValueList} '[' (explicitValues+=SadlExplicitValue (',' explicitValues+=SadlExplicitValue)*)? ']';
	public SADLGrammarAccess.SadlValueListElements getSadlValueListAccess() {
		return gaSADL.getSadlValueListAccess();
	}
	
	public ParserRule getSadlValueListRule() {
		return getSadlValueListAccess().getRule();
	}
	
	//// These articles can appear before the property name and are indicative of the functionality of the property or
	////	the cardinality of the property on the class
	//AnArticle:
	//	IndefiniteArticle | DefiniteArticle;
	public SADLGrammarAccess.AnArticleElements getAnArticleAccess() {
		return gaSADL.getAnArticleAccess();
	}
	
	public ParserRule getAnArticleRule() {
		return getAnArticleAccess().getRule();
	}
	
	//IndefiniteArticle:
	//	'A' | 'a' | 'An' | 'an' | 'any' | 'some' | 'another';
	public SADLGrammarAccess.IndefiniteArticleElements getIndefiniteArticleAccess() {
		return gaSADL.getIndefiniteArticleAccess();
	}
	
	public ParserRule getIndefiniteArticleRule() {
		return getIndefiniteArticleAccess().getRule();
	}
	
	//DefiniteArticle:
	//	'The' | 'the';
	public SADLGrammarAccess.DefiniteArticleElements getDefiniteArticleAccess() {
		return gaSADL.getDefiniteArticleAccess();
	}
	
	public ParserRule getDefiniteArticleRule() {
		return getDefiniteArticleAccess().getRule();
	}
	
	//Ordinal:
	//	'first'
	//	| 'second' | 'other'
	//	| 'third'
	//	| 'fourth'
	//	| 'fifth'
	//	| 'sixth'
	//	| 'seventh'
	//	| 'eighth'
	//	| 'ninth'
	//	| 'tenth';
	public SADLGrammarAccess.OrdinalElements getOrdinalAccess() {
		return gaSADL.getOrdinalAccess();
	}
	
	public ParserRule getOrdinalRule() {
		return getOrdinalAccess().getRule();
	}
	
	//// This is primarily for debugging purposes. Any expression can be given after "Expr:" to see if it is valid. 
	//// Such an expression has no meaning in translation.
	//ExpressionStatement ExpressionScope:
	//	{ExpressionStatement}
	//	'Expr:' expr=Expression ('=>' evaluatesTo=STRING)?;
	public SADLGrammarAccess.ExpressionStatementElements getExpressionStatementAccess() {
		return gaSADL.getExpressionStatementAccess();
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//NamedStructureAnnotation:
	//	','? '(' type=SadlResource contents+=SadlExplicitValue (',' contents+=SadlExplicitValue)* ')';
	public SADLGrammarAccess.NamedStructureAnnotationElements getNamedStructureAnnotationAccess() {
		return gaSADL.getNamedStructureAnnotationAccess();
	}
	
	public ParserRule getNamedStructureAnnotationRule() {
		return getNamedStructureAnnotationAccess().getRule();
	}
	
	//RuleStatement ExpressionScope:
	//	{RuleStatement} ('Stage' stage=NUMBER)? 'Rule' name=SadlResource annotations+=NamedStructureAnnotation* ':'? ('given'
	//	ifs+=Expression)? ('if' ifs+=Expression)? // (','? ifs+=Expression)*
	//	'then' thens+=Expression // (','? thens+=Expression)*
	//;
	public SADLGrammarAccess.RuleStatementElements getRuleStatementAccess() {
		return gaSADL.getRuleStatementAccess();
	}
	
	public ParserRule getRuleStatementRule() {
		return getRuleStatementAccess().getRule();
	}
	
	//QueryStatement ExpressionScope:
	//	{QueryStatement} start=('Ask' | 'Graph') ((name=SadlResource annotations+=NamedStructureAnnotation*)? ':'
	//	expr=(ConstructExpression | AskExpression | Expression) | name=SadlResource);
	public SADLGrammarAccess.QueryStatementElements getQueryStatementAccess() {
		return gaSADL.getQueryStatementAccess();
	}
	
	public ParserRule getQueryStatementRule() {
		return getQueryStatementAccess().getRule();
	}
	
	//UpdateStatement ExpressionScope:
	//	{UpdateStatement}
	//	'Update' ((name=SadlResource annotations+=NamedStructureAnnotation*)? ':' expr=(UpdateExpression | Expression) |
	//	name=SadlResource);
	public SADLGrammarAccess.UpdateStatementElements getUpdateStatementAccess() {
		return gaSADL.getUpdateStatementAccess();
	}
	
	public ParserRule getUpdateStatementRule() {
		return getUpdateStatementAccess().getRule();
	}
	
	//ConstructExpression Expression:
	//	{ConstructExpression}
	//	'construct' subj=SadlResource ','? pred=SadlResource ','? obj=SadlResource 'where' whereExpression=Expression;
	public SADLGrammarAccess.ConstructExpressionElements getConstructExpressionAccess() {
		return gaSADL.getConstructExpressionAccess();
	}
	
	public ParserRule getConstructExpressionRule() {
		return getConstructExpressionAccess().getRule();
	}
	
	//AskExpression Expression:
	//	{AskExpression}
	//	'ask' 'where' whereExpression=Expression;
	public SADLGrammarAccess.AskExpressionElements getAskExpressionAccess() {
		return gaSADL.getAskExpressionAccess();
	}
	
	public ParserRule getAskExpressionRule() {
		return getAskExpressionAccess().getRule();
	}
	
	//UpdateExpression Expression:
	//	{UpdateExpression} ('delete' dData='data'? deleteExpression=Expression)? ('insert' iData='data'?
	//	insertExpression=Expression)? ('where' whereExpression=Expression)?;
	public SADLGrammarAccess.UpdateExpressionElements getUpdateExpressionAccess() {
		return gaSADL.getUpdateExpressionAccess();
	}
	
	public ParserRule getUpdateExpressionRule() {
		return getUpdateExpressionAccess().getRule();
	}
	
	//TestStatement ExpressionScope:
	//	{TestStatement}
	//	'Test:' tests+=Expression;
	public SADLGrammarAccess.TestStatementElements getTestStatementAccess() {
		return gaSADL.getTestStatementAccess();
	}
	
	public ParserRule getTestStatementRule() {
		return getTestStatementAccess().getRule();
	}
	
	//PrintStatement:
	//	'Print:' (displayString=STRING
	//	| model='Deductions'
	//	| model='Model');
	public SADLGrammarAccess.PrintStatementElements getPrintStatementAccess() {
		return gaSADL.getPrintStatementAccess();
	}
	
	public ParserRule getPrintStatementRule() {
		return getPrintStatementAccess().getRule();
	}
	
	//ExplainStatement:
	//	'Explain:' (expr=Expression
	//	| 'Rule' rulename=SadlResource);
	public SADLGrammarAccess.ExplainStatementElements getExplainStatementAccess() {
		return gaSADL.getExplainStatementAccess();
	}
	
	public ParserRule getExplainStatementRule() {
		return getExplainStatementAccess().getRule();
	}
	
	//StartWriteStatement:
	//	write='Write:' dataOnly='data'? '{';
	public SADLGrammarAccess.StartWriteStatementElements getStartWriteStatementAccess() {
		return gaSADL.getStartWriteStatementAccess();
	}
	
	public ParserRule getStartWriteStatementRule() {
		return getStartWriteStatementAccess().getRule();
	}
	
	//EndWriteStatement:
	//	'}' 'to' filename=STRING;
	public SADLGrammarAccess.EndWriteStatementElements getEndWriteStatementAccess() {
		return gaSADL.getEndWriteStatementAccess();
	}
	
	public ParserRule getEndWriteStatementRule() {
		return getEndWriteStatementAccess().getRule();
	}
	
	//ReadStatement:
	//	'Read:' 'data' 'from' filename=STRING ('using' templateFilename=STRING)?;
	public SADLGrammarAccess.ReadStatementElements getReadStatementAccess() {
		return gaSADL.getReadStatementAccess();
	}
	
	public ParserRule getReadStatementRule() {
		return getReadStatementAccess().getRule();
	}
	
	//Expression:
	//	SelectExpression<true,true>;
	public SADLGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaSADL.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//NestedExpression Expression:
	//	SelectExpression<true,false>;
	public SADLGrammarAccess.NestedExpressionElements getNestedExpressionAccess() {
		return gaSADL.getNestedExpressionAccess();
	}
	
	public ParserRule getNestedExpressionRule() {
		return getNestedExpressionAccess().getRule();
	}
	
	//SelectExpression <EnabledWith, EnableComma Expression:
	//	-> ({SelectExpression}
	//	'select' distinct?='distinct'? ('*' | selectFrom+=SadlResource (','? selectFrom+=SadlResource)*) 'where'
	//	whereExpression=ExpressionParameterized<EnabledWith,EnableComma> (orderby='order' 'by' orderList+=OrderElement ->
	//	(','? orderList+=OrderElement)*)?) | ExpressionParameterized<EnabledWith,EnableComma>;
	public SADLGrammarAccess.SelectExpressionElements getSelectExpressionAccess() {
		return gaSADL.getSelectExpressionAccess();
	}
	
	public ParserRule getSelectExpressionRule() {
		return getSelectExpressionAccess().getRule();
	}
	
	//OrderElement:
	//	('asc' | desc?='desc')? orderBy=SadlResource;
	public SADLGrammarAccess.OrderElementElements getOrderElementAccess() {
		return gaSADL.getOrderElementAccess();
	}
	
	public ParserRule getOrderElementRule() {
		return getOrderElementAccess().getRule();
	}
	
	//// Real expressions start here
	//ExpressionParameterized <EnabledWith, EnableComma Expression:
	//	{Sublist} AnArticle? 'sublist' 'of' list=OrExpression<EnabledWith,EnableComma> 'matching'
	//	where=OrExpression<EnabledWith,EnableComma> | OrExpression<EnabledWith,EnableComma>;
	public SADLGrammarAccess.ExpressionParameterizedElements getExpressionParameterizedAccess() {
		return gaSADL.getExpressionParameterizedAccess();
	}
	
	public ParserRule getExpressionParameterizedRule() {
		return getExpressionParameterizedAccess().getRule();
	}
	
	//OrExpression <EnabledWith, EnableComma Expression:
	//	AndExpression<EnabledWith,EnableComma> ({BinaryOperation.left=current} op=OpOr
	//	right=AndExpression<EnabledWith,EnableComma>)*;
	public SADLGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaSADL.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'or' | '||';
	public SADLGrammarAccess.OpOrElements getOpOrAccess() {
		return gaSADL.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//AndExpression <EnabledWith, EnableComma Expression:
	//	EqualityExpression<EnabledWith,EnableComma> ({BinaryOperation.left=current} op=OpAnd
	//	right=EqualityExpression<EnabledWith,EnableComma>)*;
	public SADLGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaSADL.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'and' | '&&';
	public SADLGrammarAccess.OpAndElements getOpAndAccess() {
		return gaSADL.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//EqualityExpression <EnabledWith, EnableComma Expression:
	//	RelationalExpression<EnabledWith,EnableComma> ({BinaryOperation.left=current} op=InfixOperator
	//	right=RelationalExpression<EnabledWith,EnableComma>)*;
	public SADLGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaSADL.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//InfixOperator:
	//	'=='
	//	| '!='
	//	| '='
	//	| 'is' ('not'? 'unique' 'in')?
	//	| 'contains'
	//	| 'does' 'not' 'contain';
	public SADLGrammarAccess.InfixOperatorElements getInfixOperatorAccess() {
		return gaSADL.getInfixOperatorAccess();
	}
	
	public ParserRule getInfixOperatorRule() {
		return getInfixOperatorAccess().getRule();
	}
	
	//RelationalExpression <EnabledWith, EnableComma Expression:
	//	Addition<EnabledWith,EnableComma> -> ({BinaryOperation.left=current} => op=OpCompare
	//	right=Addition<EnabledWith,EnableComma>)*;
	public SADLGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaSADL.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<=' | '>' | '<';
	public SADLGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaSADL.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//Addition <EnabledWith, EnableComma Expression:
	//	Multiplication<EnabledWith,EnableComma> ({BinaryOperation.left=current} op=AddOp
	//	right=Multiplication<EnabledWith,EnableComma>)*;
	public SADLGrammarAccess.AdditionElements getAdditionAccess() {
		return gaSADL.getAdditionAccess();
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//AddOp:
	//	'+' | '-';
	public SADLGrammarAccess.AddOpElements getAddOpAccess() {
		return gaSADL.getAddOpAccess();
	}
	
	public ParserRule getAddOpRule() {
		return getAddOpAccess().getRule();
	}
	
	//Multiplication <EnabledWith, EnableComma Expression:
	//	Power<EnabledWith,EnableComma> ({BinaryOperation.left=current} op=MultiOp right=Power<EnabledWith,EnableComma>)*;
	public SADLGrammarAccess.MultiplicationElements getMultiplicationAccess() {
		return gaSADL.getMultiplicationAccess();
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//MultiOp:
	//	'*' | '/' | '%';
	public SADLGrammarAccess.MultiOpElements getMultiOpAccess() {
		return gaSADL.getMultiOpAccess();
	}
	
	public ParserRule getMultiOpRule() {
		return getMultiOpAccess().getRule();
	}
	
	//Power <EnabledWith, EnableComma Expression:
	//	PropOfSubject<EnabledWith,EnableComma> ({BinaryOperation.left=current} op='^'
	//	right=PropOfSubject<EnabledWith,EnableComma>)*;
	public SADLGrammarAccess.PowerElements getPowerAccess() {
		return gaSADL.getPowerAccess();
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}
	
	//PropOfSubject <EnabledWith, EnableComma Expression:
	//	ElementInList<EnabledWith,EnableComma> -> ({PropOfSubject.left=current} of=('of' | 'for' | 'in')
	//	right=PropOfSubject<EnabledWith,EnableComma> | -> ({SubjHasProp.left=current} (<EnableComma> comma?=',')?
	//	(<EnabledWith> 'with' | 'has')? prop=SadlResource -> right=ElementInList<EnabledWith,EnableComma>?)+)?;
	public SADLGrammarAccess.PropOfSubjectElements getPropOfSubjectAccess() {
		return gaSADL.getPropOfSubjectAccess();
	}
	
	public ParserRule getPropOfSubjectRule() {
		return getPropOfSubjectAccess().getRule();
	}
	
	//ElementInList <EnabledWith, EnableComma Expression:
	//	UnitExpression<EnabledWith,EnableComma> | {ElementInList} 'element' (before?='before' | after?='after')?
	//	element=UnitExpression<EnabledWith,EnableComma>;
	public SADLGrammarAccess.ElementInListElements getElementInListAccess() {
		return gaSADL.getElementInListAccess();
	}
	
	public ParserRule getElementInListRule() {
		return getElementInListAccess().getRule();
	}
	
	//UnitExpression <EnabledWith, EnableComma Expression:
	//	UnaryExpression<EnabledWith,EnableComma> ({UnitExpression.left=current} unit=STRING)?;
	public SADLGrammarAccess.UnitExpressionElements getUnitExpressionAccess() {
		return gaSADL.getUnitExpressionAccess();
	}
	
	public ParserRule getUnitExpressionRule() {
		return getUnitExpressionAccess().getRule();
	}
	
	//UnaryExpression <EnabledWith, EnableComma Expression:
	//	PrimaryExpression<EnabledWith,EnableComma> | {UnaryExpression} op=('not' | '!' | 'only' | '-' | ThereExists)
	//	expr=PrimaryExpression<EnabledWith,EnableComma>;
	public SADLGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaSADL.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//ThereExists:
	//	'there' 'exists';
	public SADLGrammarAccess.ThereExistsElements getThereExistsAccess() {
		return gaSADL.getThereExistsAccess();
	}
	
	public ParserRule getThereExistsRule() {
		return getThereExistsAccess().getRule();
	}
	
	//// primary expressions are the atom units of expression in the grammar	
	//PrimaryExpression <EnabledWith, EnableComma Expression:
	//	'(' SelectExpression<EnabledWith,EnableComma> ')'
	//	| Name
	//	| {Declaration} article=AnArticle ordinal=Ordinal? type=SadlPrimaryTypeReference ('[' arglist+=NestedExpression? (','
	//	arglist+=NestedExpression)* ']'
	//	| 'length' len=FacetNumber -> ('-' maxlen=(FacetNumber | '*'))?)?
	//	| {StringLiteral} value=STRING
	//	| {NumberLiteral} value=AnyNumber
	//	| {BooleanLiteral} value=BooleanValue
	//	| {Constant} constant=Constants
	//	| {ValueTable} valueTable=ValueTable;
	public SADLGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaSADL.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//Name SadlResource:
	//	{Name} name=[SadlResource|QNAME] -> (function?='(' arglist+=NestedExpression? (',' arglist+=NestedExpression)* ')')?;
	public SADLGrammarAccess.NameElements getNameAccess() {
		return gaSADL.getNameAccess();
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//// the truth table
	//ValueTable:
	//	'[' row=ValueRow ']'
	//	// e.g., [George, 23, "Purple", 38.186111]
	//	| '{' '[' rows+=ValueRow ']' (','? '[' rows+=ValueRow ']')* '}'
	//	// e.g., {[George, 23, "Purple", 38.186111], [Martha, 24, "Pink", 45.203]}
	//;
	public SADLGrammarAccess.ValueTableElements getValueTableAccess() {
		return gaSADL.getValueTableAccess();
	}
	
	public ParserRule getValueTableRule() {
		return getValueTableAccess().getRule();
	}
	
	//BooleanValue:
	//	'true' | 'false';
	public SADLGrammarAccess.BooleanValueElements getBooleanValueAccess() {
		return gaSADL.getBooleanValueAccess();
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//Constants:
	//	'PI' | 'known' | 'e' | '--' | 'None' | 'a'? 'type' | DefiniteArticle? 'length' | 'count' | DefiniteArticle? 'index' |
	//	('first' | 'last' | AnArticle Ordinal?) 'element' | 'value';
	public SADLGrammarAccess.ConstantsElements getConstantsAccess() {
		return gaSADL.getConstantsAccess();
	}
	
	public ParserRule getConstantsRule() {
		return getConstantsAccess().getRule();
	}
	
	//ValueRow:
	//	explicitValues+=NestedExpression (',' explicitValues+=NestedExpression)*;
	public SADLGrammarAccess.ValueRowElements getValueRowAccess() {
		return gaSADL.getValueRowAccess();
	}
	
	public ParserRule getValueRowRule() {
		return getValueRowAccess().getRule();
	}
	
	//// e.g., George, 23, "Purple", 38.186111
	//DNAME:
	//	ID;
	public SADLGrammarAccess.DNAMEElements getDNAMEAccess() {
		return gaSADL.getDNAMEAccess();
	}
	
	public ParserRule getDNAMERule() {
		return getDNAMEAccess().getRule();
	}
	
	//AnyNumber ecore::EBigDecimal:
	//	DecimalNumber EXPONENT?;
	public SADLGrammarAccess.AnyNumberElements getAnyNumberAccess() {
		return gaSADL.getAnyNumberAccess();
	}
	
	public ParserRule getAnyNumberRule() {
		return getAnyNumberAccess().getRule();
	}
	
	//DecimalNumber ecore::EBigDecimal:
	//	NUMBER;
	public SADLGrammarAccess.DecimalNumberElements getDecimalNumberAccess() {
		return gaSADL.getDecimalNumberAccess();
	}
	
	public ParserRule getDecimalNumberRule() {
		return getDecimalNumberAccess().getRule();
	}
	
	//EXPONENT ecore::EBigDecimal:
	//	('e' | 'E') ('-' | '+')? DecimalNumber;
	public SADLGrammarAccess.EXPONENTElements getEXPONENTAccess() {
		return gaSADL.getEXPONENTAccess();
	}
	
	public ParserRule getEXPONENTRule() {
		return getEXPONENTAccess().getRule();
	}
	
	//EOS:
	//	'.';
	public SADLGrammarAccess.EOSElements getEOSAccess() {
		return gaSADL.getEOSAccess();
	}
	
	public ParserRule getEOSRule() {
		return getEOSAccess().getRule();
	}
	
	//QNAME:
	//	QNAME_TERMINAL | ID;
	public SADLGrammarAccess.QNAMEElements getQNAMEAccess() {
		return gaSADL.getQNAMEAccess();
	}
	
	public ParserRule getQNAMERule() {
		return getQNAMEAccess().getRule();
	}
	
	//terminal NUMBER returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getNUMBERRule() {
		return gaSADL.getNUMBERRule();
	}
	
	//terminal WS:
	//	'\\u00A0' | ' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaSADL.getWSRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '-' | '%' | '~')*;
	public TerminalRule getIDRule() {
		return gaSADL.getIDRule();
	}
	
	//terminal QNAME_TERMINAL:
	//	ID ':' ID;
	public TerminalRule getQNAME_TERMINALRule() {
		return gaSADL.getQNAME_TERMINALRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaSADL.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaSADL.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSADL.getSL_COMMENTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSADL.getANY_OTHERRule();
	}
}
