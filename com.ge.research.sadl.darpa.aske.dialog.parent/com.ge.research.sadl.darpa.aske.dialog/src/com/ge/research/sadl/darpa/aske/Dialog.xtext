/********************************************************************** 
 * Note: This license has also been called the "New BSD License" or 
 * "Modified BSD License". See also the 2-clause BSD License.
 *
 * Copyright ï¿½ 2018-2019 - General Electric Company, All Rights Reserved
 * 
 * Projects: ANSWER and KApEESH, developed with the support of the Defense 
 * Advanced Research Projects Agency (DARPA) under Agreement  No.  
 * HR00111990006 and Agreement No. HR00111990007, respectively. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its 
 *    contributors may be used to endorse or promote products derived 
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 ***********************************************************************/
/*
 * SADL Extension for DARPA ASKE dialog
 */
grammar com.ge.research.sadl.darpa.aske.Dialog with com.ge.research.sadl.SADL

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.ge.com/research/sadl/SADL" as sadl

generate dialog "http://www.ge.com/research/sadl/darpa/aske/Dialog"

DialogModel returns sadl::SadlModel :
    super::SadlModel
;

@Override
SadlModelElement returns sadl::SadlModelElement :
	super::SadlStatement EOS			|
	super::ExternalEquationStatement EOS	|
	super::EquationStatement EOS	|
	AnswerCMStatement EOS 		|
	ModifiedAskStatement EOS	|
	WhatStatement EOS			|
	HowManyValuesStatement EOS	|
	SaveStatement EOS			|
	EvalStatement EOS			|
	YesNoAnswerStatement		|
	MyNameIsStatement EOS		|
	TargetModelName EOS			|
	ExtractStatement EOS		|
	CompareStatement EOS 	 	|
	SuitabilityStatement EOS	|
	SeeParentheticalLink 		|
	TestLongrunningTask EOS		|
	ComparisonTableStatement EOS |
	NewExpressionStatement EOS	|
	InsightStatement EOS
;

InsightStatement:
	indep=SadlResource 'does' 'not' 'affect' dep=SadlResource |
	relDesc1=RelationshipDescriptor1 indep=SadlResource relDesc2=RelationshipDescriptor2 dep=SadlResource ('of' 'the' class=SadlResource)?|
	indep=SadlResource ('of' 'the' class=SadlResource)? 'has' 'a' localExtreme=SadlResource 'at' extremeLoc=SadlResource 'of' dep=SadlResource |
	relDesc1=RelationshipDescriptor1 indep=SadlResource 'takes' 'the' class=SadlResource ('inside'|'outside') 'operating' 'conditions'
;

//LocalExtreme:
//	locExtreme=''

NewExpressionStatement:
	('Add'|'add') 
	(newExpr=Expression
	)
;

UndefinedConceptStatement:
	'Concept' concept=SadlResource 'is' 'not' 'defined' ';' 'please' 'define' 'or' 'do' 'extraction'
;

NoModelFoundStatement:
	'No' 'model' 'found' 'to' 'compute' target=PropOfSubject<false,false> ';' 'please' 'add' 'a' 'model' 'or' 'do' 'extraction'
;

RelationshipDescriptor1:
	relDesc='Increasing' | {RelationshipDescriptor1} 'increasing' | {RelationshipDescriptor1} 'Decreasing' | {RelationshipDescriptor1} 'decreasing'
;

RelationshipDescriptor2:
	relDesc='increases'|{RelationshipDescriptor1} 'decreases'
;

TestLongrunningTask:
	'Long' 'task' time=NUMBER
;

ComparisonTableStatement:
	comparisonTable = ValueTable
;

SeeParentheticalLink:
	'(' 'See' linkUris+=PLink (',' linkUris+=PLink)* EOS ')'
;

PLink:
	linkUri=STRING
;

CompareStatement:
//	('Compare'|'compare') toCompare=Expression compareConnective=('when' | 'for') whenExpr=Expression
	('Compare'|'compare') 'their'? toCompare=Expression (compareWhens+=CompareWhen ('and' compareWhens+=CompareWhen)*)?
;

CompareWhen:	
	('when' | 'for') whenExpr=Expression
;

SuitabilityStatement:
	(('Which'|'which') what=Expression 'is' 'suitable' suitableWhens+=CompareWhen) |
	(('Is'|'is') what=Expression 'suitable' suitableWhens+=CompareWhen)
;

ExtractStatement:
	('Extract'|'extract') 'from' sources+=STRING (',' sources+=STRING)*
;

EvalStatement returns SadlEquationInvocation:
	{SadlEquationInvocation} ('Evaluate'|'evaluate') name=SadlResource '(' (parameters+=ParameterizedExpressionWithUnit (',' parameters+=ParameterizedExpressionWithUnit)* )?')'
;

ParameterizedExpressionWithUnit:
	expression=ExpressionParameterized<true,false> ('{'unit=UNIT'}')?
;

TargetModelName:
	'target' 'model' targetResource=[sadl::SadlModel|STRING] ('alias' alias=ID)?
;

MyNameIsStatement:
	('My'|'my') 'name' 'is' answer=ID
;

YesNoAnswerStatement:
	{YesNoAnswerStatement} answer = ('Y.'|'y.'|'Yes.'|'yes.'|'N.'|'n.'|'No.'|'no.')
;

SaveStatement:
	{SaveStatement} ('Save' | 'save') (target=SadlResource | all='all') ('to' saveTarget=ID)?
;

AnswerCMStatement:
	'CM:' (sstmt = ((
		SadlStatement|
		ModifiedAskStatement|
		WhatStatement|
		YesNoAnswerStatement|
		ExternalEquationStatement|
		EquationStatement|
		ComparisonTableStatement|
		UndefinedConceptStatement |
		NoModelFoundStatement |
		NewExpressionStatement |
		MatchFoundStatement
	)) | str = STRING)
;

MatchFoundStatement:
	'Found' 'matching' (type=('class'|'property') concept=SadlResource) |
	type='expression' concept=Expression
;

ModifiedAskStatement returns sadl::ExpressionScope:
	{ModifiedAskStatement} start = ('Ask' | 'ask' | 'Find' | 'find' |'Graph' | 'graph') 
	(
		expr=(ConstructExpression | AskExpression | Expression) (':' '[' parameterizedValues = ValueRow ']')?
	)
;

WhatStatement:
	{WhatStatement} ('What'|'what') stmt=(WhatIsStatement | WhatValuesStatement | WhatTypeStatement)
;
WhatIsStatement:
	{WhatIsStatement} 'is' (('your' 'name') | ('its'? target=Expression WhenPart?))
;

WhatTypeStatement:
	{WhatTypeStatement} 'semantic'?'type' ('is' target=Expression | 'does' equation=SadlResource 'return')
;

fragment WhenPart returns WithWhenPart:
	'when' when=Expression
;

WhatValuesStatement:
	{WhatValuesStatement} (typof='type' 'of')? ('value'|'values') typ=('can'|'must') prop=SadlResource ('of' article=AnArticle? cls=SadlPrimaryTypeReference)? 'have'
;

HowManyValuesStatement:
//	{HowManyValuesStatement} ('How'|'how') 'many' 'values' 'of' prop=SadlResource ('of' 'type' typ=SadlPrimaryTypeReference)? 'can' article=AnArticle? cls=SadlPrimaryTypeReference 'have'
	{HowManyValuesStatement} ('How'|'how') 'many' 'values' ('of' 'type' typ=SadlPrimaryTypeReference)? 'can' prop=SadlResource ('of' article=AnArticle? cls=SadlPrimaryTypeReference)? 'have'
;

@Override
EOS:
	super |
	'?'
;
